---

- name: use python3 for this role
  set_fact:
    ansible_python_interpreter: /usr/bin/python3

- name: install packages
  package:
    name: "{{ item  }}"
    state: present
  loop: "{{ pkgs }}"

# Firewalld is straight up broken in debian without this
- name: configure the firewalld daemon in debian-based systems
  lineinfile:
    path: /etc/firewalld/firewalld.conf
    regexp: '^#?\s*IndividualCalls=.*'
    line: IndividualCalls=yes
  when: ansible_os_family == "Debian"
  register: firewalld_reconfigured

- name: restart firewalld if it's been reconfigured
  service:
    name: firewalld
    state: restarted
  when: firewalld_reconfigured.changed

- name: make sure firewalld is running
  service:
    name: firewalld
    state: started

- name: add zones from ansible
  firewalld:
    zone: "{{ item }}"
    state: present
    permanent: true
  loop: "{{ firewalld_opts.zones | map(attribute='name') | list }}"

- name: get the default zone
  shell: "firewall-cmd --get-default-zone"
  register: firewalld_current_zone
  changed_when: False

- name: set the default zone
  shell: "firewall-cmd --set-default-zone={{ firewalld_opts.default_zone }}"
  when: firewalld_current_zone.stdout != firewalld_opts.default_zone
  register: default_zone_changed

- name: reload firewalld
  shell: "firewall-cmd --reload"
  when: default_zone_changed.changed
 
- name: determine zone targets
  shell: "firewall-cmd --permanent --get-target --zone={{ item.name }}"
  register: current_targets
  loop: "{{ firewalld_opts.zones }}"
  changed_when: False

- name: update zone targets
  shell: "firewall-cmd --permanent --set-target={{ item.item.target | default('DROP') }} --zone={{ item.item.name }}"
  when: item.item.target is defined and item.stdout.strip() != item.item.target
  loop: "{{ current_targets.results }}"

- name: get the current enabled services
  shell: "firewall-cmd --list-services --zone={{ item.name }}"
  register: current_services
  loop: "{{ firewalld_opts.zones }}"
  changed_when: False

- name: get the current enabled services
  set_fact: 
    tmp_list: "{{ tmp_list | default([]) + [{ 'zone': item.item.name, 'services': item.stdout.split(' ') }] }}"
  loop: "{{ current_services.results }}"


  # 
  # - name: configure allowed services
  #   firewalld:
  #     service: "{{ item }}"
  #     zone: "{{ firewalld_default_zone }}"
  #     state: enabled
  #     permanent: yes
  #     immediate: yes
  #   loop: "{{ firewalld_allowed_services }}"
  #  

